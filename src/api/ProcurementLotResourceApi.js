/**
 * ItalianPP API
 * ItalianPP API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ProcurementLotDTO from '../model/ProcurementLotDTO';

/**
* ProcurementLotResource service.
* @module api/ProcurementLotResourceApi
* @version 0.0.1
*/
export default class ProcurementLotResourceApi {

    /**
    * Constructs a new ProcurementLotResourceApi. 
    * @alias module:api/ProcurementLotResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the countProcurementLotsUsingGET operation.
     * @callback module:api/ProcurementLotResourceApi~countProcurementLotsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * countProcurementLots
     * @param {Object} opts Optional parameters
     * @param {module:api/ProcurementLotResourceApi~countProcurementLotsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    countProcurementLotsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'baseAmount.equals': opts['baseAmountEquals'],
        'baseAmount.greaterThan': opts['baseAmountGreaterThan'],
        'baseAmount.greaterThanOrEqual': opts['baseAmountGreaterThanOrEqual'],
        'baseAmount.in': this.apiClient.buildCollectionParam(opts['baseAmountIn'], 'multi'),
        'baseAmount.lessThan': opts['baseAmountLessThan'],
        'baseAmount.lessThanOrEqual': opts['baseAmountLessThanOrEqual'],
        'baseAmount.notEquals': opts['baseAmountNotEquals'],
        'baseAmount.specified': opts['baseAmountSpecified'],
        'cig.contains': opts['cigContains'],
        'cig.doesNotContain': opts['cigDoesNotContain'],
        'cig.equals': opts['cigEquals'],
        'cig.in': this.apiClient.buildCollectionParam(opts['cigIn'], 'multi'),
        'cig.notEquals': opts['cigNotEquals'],
        'cig.specified': opts['cigSpecified'],
        'cpvCode.contains': opts['cpvCodeContains'],
        'cpvCode.doesNotContain': opts['cpvCodeDoesNotContain'],
        'cpvCode.equals': opts['cpvCodeEquals'],
        'cpvCode.in': this.apiClient.buildCollectionParam(opts['cpvCodeIn'], 'multi'),
        'cpvCode.notEquals': opts['cpvCodeNotEquals'],
        'cpvCode.specified': opts['cpvCodeSpecified'],
        'description.contains': opts['descriptionContains'],
        'description.doesNotContain': opts['descriptionDoesNotContain'],
        'description.equals': opts['descriptionEquals'],
        'description.in': this.apiClient.buildCollectionParam(opts['descriptionIn'], 'multi'),
        'description.notEquals': opts['descriptionNotEquals'],
        'description.specified': opts['descriptionSpecified'],
        'id.equals': opts['idEquals'],
        'id.greaterThan': opts['idGreaterThan'],
        'id.greaterThanOrEqual': opts['idGreaterThanOrEqual'],
        'id.in': this.apiClient.buildCollectionParam(opts['idIn'], 'multi'),
        'id.lessThan': opts['idLessThan'],
        'id.lessThanOrEqual': opts['idLessThanOrEqual'],
        'id.notEquals': opts['idNotEquals'],
        'id.specified': opts['idSpecified'],
        'ippLotCategoryCode.contains': opts['ippLotCategoryCodeContains'],
        'ippLotCategoryCode.doesNotContain': opts['ippLotCategoryCodeDoesNotContain'],
        'ippLotCategoryCode.equals': opts['ippLotCategoryCodeEquals'],
        'ippLotCategoryCode.in': this.apiClient.buildCollectionParam(opts['ippLotCategoryCodeIn'], 'multi'),
        'ippLotCategoryCode.notEquals': opts['ippLotCategoryCodeNotEquals'],
        'ippLotCategoryCode.specified': opts['ippLotCategoryCodeSpecified'],
        'ippLotTypeCode.contains': opts['ippLotTypeCodeContains'],
        'ippLotTypeCode.doesNotContain': opts['ippLotTypeCodeDoesNotContain'],
        'ippLotTypeCode.equals': opts['ippLotTypeCodeEquals'],
        'ippLotTypeCode.in': this.apiClient.buildCollectionParam(opts['ippLotTypeCodeIn'], 'multi'),
        'ippLotTypeCode.notEquals': opts['ippLotTypeCodeNotEquals'],
        'ippLotTypeCode.specified': opts['ippLotTypeCodeSpecified'],
        'istatCode.contains': opts['istatCodeContains'],
        'istatCode.doesNotContain': opts['istatCodeDoesNotContain'],
        'istatCode.equals': opts['istatCodeEquals'],
        'istatCode.in': this.apiClient.buildCollectionParam(opts['istatCodeIn'], 'multi'),
        'istatCode.notEquals': opts['istatCodeNotEquals'],
        'istatCode.specified': opts['istatCodeSpecified'],
        'nutsCode.contains': opts['nutsCodeContains'],
        'nutsCode.doesNotContain': opts['nutsCodeDoesNotContain'],
        'nutsCode.equals': opts['nutsCodeEquals'],
        'nutsCode.in': this.apiClient.buildCollectionParam(opts['nutsCodeIn'], 'multi'),
        'nutsCode.notEquals': opts['nutsCodeNotEquals'],
        'nutsCode.specified': opts['nutsCodeSpecified'],
        'offerExpiryDate.equals': opts['offerExpiryDateEquals'],
        'offerExpiryDate.greaterThan': opts['offerExpiryDateGreaterThan'],
        'offerExpiryDate.greaterThanOrEqual': opts['offerExpiryDateGreaterThanOrEqual'],
        'offerExpiryDate.in[0].dayOfMonth': opts['offerExpiryDateIn0DayOfMonth'],
        'offerExpiryDate.in[0].dayOfWeek': opts['offerExpiryDateIn0DayOfWeek'],
        'offerExpiryDate.in[0].dayOfYear': opts['offerExpiryDateIn0DayOfYear'],
        'offerExpiryDate.in[0].hour': opts['offerExpiryDateIn0Hour'],
        'offerExpiryDate.in[0].minute': opts['offerExpiryDateIn0Minute'],
        'offerExpiryDate.in[0].month': opts['offerExpiryDateIn0Month'],
        'offerExpiryDate.in[0].monthValue': opts['offerExpiryDateIn0MonthValue'],
        'offerExpiryDate.in[0].nano': opts['offerExpiryDateIn0Nano'],
        'offerExpiryDate.in[0].offset.id': opts['offerExpiryDateIn0OffsetId'],
        'offerExpiryDate.in[0].offset.rules.fixedOffset': opts['offerExpiryDateIn0OffsetRulesFixedOffset'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator': opts['offerExpiryDateIn0OffsetRulesTransitionRules0DayOfMonthIndicator'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].dayOfWeek': opts['offerExpiryDateIn0OffsetRulesTransitionRules0DayOfWeek'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.hour': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeHour'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.minute': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeMinute'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.nano': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeNano'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.second': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeSecond'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].midnightEndOfDay': opts['offerExpiryDateIn0OffsetRulesTransitionRules0MidnightEndOfDay'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].month': opts['offerExpiryDateIn0OffsetRulesTransitionRules0Month'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].timeDefinition': opts['offerExpiryDateIn0OffsetRulesTransitionRules0TimeDefinition'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].dateTimeAfter': opts['offerExpiryDateIn0OffsetRulesTransitions0DateTimeAfter'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].dateTimeBefore': opts['offerExpiryDateIn0OffsetRulesTransitions0DateTimeBefore'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.nano': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationNano'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.negative': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationNegative'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.seconds': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationSeconds'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].dateBased': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0DateBased'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0DurationEstimated'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].timeBased': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0TimeBased'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.zero': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationZero'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].gap': opts['offerExpiryDateIn0OffsetRulesTransitions0Gap'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].instant': opts['offerExpiryDateIn0OffsetRulesTransitions0Instant'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].overlap': opts['offerExpiryDateIn0OffsetRulesTransitions0Overlap'],
        'offerExpiryDate.in[0].offset.totalSeconds': opts['offerExpiryDateIn0OffsetTotalSeconds'],
        'offerExpiryDate.in[0].second': opts['offerExpiryDateIn0Second'],
        'offerExpiryDate.in[0].year': opts['offerExpiryDateIn0Year'],
        'offerExpiryDate.in[0].zone.id': opts['offerExpiryDateIn0ZoneId'],
        'offerExpiryDate.in[0].zone.rules.fixedOffset': opts['offerExpiryDateIn0ZoneRulesFixedOffset'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator': opts['offerExpiryDateIn0ZoneRulesTransitionRules0DayOfMonthIndicator'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].dayOfWeek': opts['offerExpiryDateIn0ZoneRulesTransitionRules0DayOfWeek'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.hour': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeHour'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.minute': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeMinute'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.nano': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeNano'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.second': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeSecond'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].midnightEndOfDay': opts['offerExpiryDateIn0ZoneRulesTransitionRules0MidnightEndOfDay'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].month': opts['offerExpiryDateIn0ZoneRulesTransitionRules0Month'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetAfter.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetAfterId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetBefore.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetBeforeId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].standardOffset.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0StandardOffsetId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].timeDefinition': opts['offerExpiryDateIn0ZoneRulesTransitionRules0TimeDefinition'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].dateTimeAfter': opts['offerExpiryDateIn0ZoneRulesTransitions0DateTimeAfter'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].dateTimeBefore': opts['offerExpiryDateIn0ZoneRulesTransitions0DateTimeBefore'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.nano': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationNano'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.negative': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationNegative'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.seconds': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].dateBased': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0DateBased'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0DurationEstimated'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].timeBased': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0TimeBased'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.zero': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationZero'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].gap': opts['offerExpiryDateIn0ZoneRulesTransitions0Gap'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].instant': opts['offerExpiryDateIn0ZoneRulesTransitions0Instant'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetAfter.id': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetAfterId'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetAfterTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetBefore.id': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetBeforeId'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].overlap': opts['offerExpiryDateIn0ZoneRulesTransitions0Overlap'],
        'offerExpiryDate.lessThan': opts['offerExpiryDateLessThan'],
        'offerExpiryDate.lessThanOrEqual': opts['offerExpiryDateLessThanOrEqual'],
        'offerExpiryDate.notEquals': opts['offerExpiryDateNotEquals'],
        'offerExpiryDate.specified': opts['offerExpiryDateSpecified'],
        'procurementId.equals': opts['procurementIdEquals'],
        'procurementId.greaterThan': opts['procurementIdGreaterThan'],
        'procurementId.greaterThanOrEqual': opts['procurementIdGreaterThanOrEqual'],
        'procurementId.in': this.apiClient.buildCollectionParam(opts['procurementIdIn'], 'multi'),
        'procurementId.lessThan': opts['procurementIdLessThan'],
        'procurementId.lessThanOrEqual': opts['procurementIdLessThanOrEqual'],
        'procurementId.notEquals': opts['procurementIdNotEquals'],
        'procurementId.specified': opts['procurementIdSpecified'],
        'securityAmount.equals': opts['securityAmountEquals'],
        'securityAmount.greaterThan': opts['securityAmountGreaterThan'],
        'securityAmount.greaterThanOrEqual': opts['securityAmountGreaterThanOrEqual'],
        'securityAmount.in': this.apiClient.buildCollectionParam(opts['securityAmountIn'], 'multi'),
        'securityAmount.lessThan': opts['securityAmountLessThan'],
        'securityAmount.lessThanOrEqual': opts['securityAmountLessThanOrEqual'],
        'securityAmount.notEquals': opts['securityAmountNotEquals'],
        'securityAmount.specified': opts['securityAmountSpecified']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/api/procurement-lots/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createProcurementLotUsingPOST operation.
     * @callback module:api/ProcurementLotResourceApi~createProcurementLotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementLotDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createProcurementLot
     * @param {module:api/ProcurementLotResourceApi~createProcurementLotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementLotDTO}
     */
    createProcurementLotUsingPOST(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProcurementLotDTO;

      return this.apiClient.callApi(
        '/api/procurement-lots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProcurementLotUsingDELETE operation.
     * @callback module:api/ProcurementLotResourceApi~deleteProcurementLotUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteProcurementLot
     * @param {module:api/ProcurementLotResourceApi~deleteProcurementLotUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProcurementLotUsingDELETE(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/procurement-lots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllProcurementLotsUsingGET operation.
     * @callback module:api/ProcurementLotResourceApi~getAllProcurementLotsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProcurementLotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllProcurementLots
     * @param {Object} opts Optional parameters
     * @param {module:api/ProcurementLotResourceApi~getAllProcurementLotsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProcurementLotDTO>}
     */
    getAllProcurementLotsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'baseAmount.equals': opts['baseAmountEquals'],
        'baseAmount.greaterThan': opts['baseAmountGreaterThan'],
        'baseAmount.greaterThanOrEqual': opts['baseAmountGreaterThanOrEqual'],
        'baseAmount.in': this.apiClient.buildCollectionParam(opts['baseAmountIn'], 'multi'),
        'baseAmount.lessThan': opts['baseAmountLessThan'],
        'baseAmount.lessThanOrEqual': opts['baseAmountLessThanOrEqual'],
        'baseAmount.notEquals': opts['baseAmountNotEquals'],
        'baseAmount.specified': opts['baseAmountSpecified'],
        'cig.contains': opts['cigContains'],
        'cig.doesNotContain': opts['cigDoesNotContain'],
        'cig.equals': opts['cigEquals'],
        'cig.in': this.apiClient.buildCollectionParam(opts['cigIn'], 'multi'),
        'cig.notEquals': opts['cigNotEquals'],
        'cig.specified': opts['cigSpecified'],
        'cpvCode.contains': opts['cpvCodeContains'],
        'cpvCode.doesNotContain': opts['cpvCodeDoesNotContain'],
        'cpvCode.equals': opts['cpvCodeEquals'],
        'cpvCode.in': this.apiClient.buildCollectionParam(opts['cpvCodeIn'], 'multi'),
        'cpvCode.notEquals': opts['cpvCodeNotEquals'],
        'cpvCode.specified': opts['cpvCodeSpecified'],
        'description.contains': opts['descriptionContains'],
        'description.doesNotContain': opts['descriptionDoesNotContain'],
        'description.equals': opts['descriptionEquals'],
        'description.in': this.apiClient.buildCollectionParam(opts['descriptionIn'], 'multi'),
        'description.notEquals': opts['descriptionNotEquals'],
        'description.specified': opts['descriptionSpecified'],
        'id.equals': opts['idEquals'],
        'id.greaterThan': opts['idGreaterThan'],
        'id.greaterThanOrEqual': opts['idGreaterThanOrEqual'],
        'id.in': this.apiClient.buildCollectionParam(opts['idIn'], 'multi'),
        'id.lessThan': opts['idLessThan'],
        'id.lessThanOrEqual': opts['idLessThanOrEqual'],
        'id.notEquals': opts['idNotEquals'],
        'id.specified': opts['idSpecified'],
        'ippLotCategoryCode.contains': opts['ippLotCategoryCodeContains'],
        'ippLotCategoryCode.doesNotContain': opts['ippLotCategoryCodeDoesNotContain'],
        'ippLotCategoryCode.equals': opts['ippLotCategoryCodeEquals'],
        'ippLotCategoryCode.in': this.apiClient.buildCollectionParam(opts['ippLotCategoryCodeIn'], 'multi'),
        'ippLotCategoryCode.notEquals': opts['ippLotCategoryCodeNotEquals'],
        'ippLotCategoryCode.specified': opts['ippLotCategoryCodeSpecified'],
        'ippLotTypeCode.contains': opts['ippLotTypeCodeContains'],
        'ippLotTypeCode.doesNotContain': opts['ippLotTypeCodeDoesNotContain'],
        'ippLotTypeCode.equals': opts['ippLotTypeCodeEquals'],
        'ippLotTypeCode.in': this.apiClient.buildCollectionParam(opts['ippLotTypeCodeIn'], 'multi'),
        'ippLotTypeCode.notEquals': opts['ippLotTypeCodeNotEquals'],
        'ippLotTypeCode.specified': opts['ippLotTypeCodeSpecified'],
        'istatCode.contains': opts['istatCodeContains'],
        'istatCode.doesNotContain': opts['istatCodeDoesNotContain'],
        'istatCode.equals': opts['istatCodeEquals'],
        'istatCode.in': this.apiClient.buildCollectionParam(opts['istatCodeIn'], 'multi'),
        'istatCode.notEquals': opts['istatCodeNotEquals'],
        'istatCode.specified': opts['istatCodeSpecified'],
        'nutsCode.contains': opts['nutsCodeContains'],
        'nutsCode.doesNotContain': opts['nutsCodeDoesNotContain'],
        'nutsCode.equals': opts['nutsCodeEquals'],
        'nutsCode.in': this.apiClient.buildCollectionParam(opts['nutsCodeIn'], 'multi'),
        'nutsCode.notEquals': opts['nutsCodeNotEquals'],
        'nutsCode.specified': opts['nutsCodeSpecified'],
        'offerExpiryDate.equals': opts['offerExpiryDateEquals'],
        'offerExpiryDate.greaterThan': opts['offerExpiryDateGreaterThan'],
        'offerExpiryDate.greaterThanOrEqual': opts['offerExpiryDateGreaterThanOrEqual'],
        'offerExpiryDate.in[0].dayOfMonth': opts['offerExpiryDateIn0DayOfMonth'],
        'offerExpiryDate.in[0].dayOfWeek': opts['offerExpiryDateIn0DayOfWeek'],
        'offerExpiryDate.in[0].dayOfYear': opts['offerExpiryDateIn0DayOfYear'],
        'offerExpiryDate.in[0].hour': opts['offerExpiryDateIn0Hour'],
        'offerExpiryDate.in[0].minute': opts['offerExpiryDateIn0Minute'],
        'offerExpiryDate.in[0].month': opts['offerExpiryDateIn0Month'],
        'offerExpiryDate.in[0].monthValue': opts['offerExpiryDateIn0MonthValue'],
        'offerExpiryDate.in[0].nano': opts['offerExpiryDateIn0Nano'],
        'offerExpiryDate.in[0].offset.id': opts['offerExpiryDateIn0OffsetId'],
        'offerExpiryDate.in[0].offset.rules.fixedOffset': opts['offerExpiryDateIn0OffsetRulesFixedOffset'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].dayOfMonthIndicator': opts['offerExpiryDateIn0OffsetRulesTransitionRules0DayOfMonthIndicator'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].dayOfWeek': opts['offerExpiryDateIn0OffsetRulesTransitionRules0DayOfWeek'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.hour': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeHour'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.minute': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeMinute'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.nano': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeNano'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].localTime.second': opts['offerExpiryDateIn0OffsetRulesTransitionRules0LocalTimeSecond'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].midnightEndOfDay': opts['offerExpiryDateIn0OffsetRulesTransitionRules0MidnightEndOfDay'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].month': opts['offerExpiryDateIn0OffsetRulesTransitionRules0Month'],
        'offerExpiryDate.in[0].offset.rules.transitionRules[0].timeDefinition': opts['offerExpiryDateIn0OffsetRulesTransitionRules0TimeDefinition'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].dateTimeAfter': opts['offerExpiryDateIn0OffsetRulesTransitions0DateTimeAfter'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].dateTimeBefore': opts['offerExpiryDateIn0OffsetRulesTransitions0DateTimeBefore'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.nano': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationNano'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.negative': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationNegative'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.seconds': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationSeconds'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].dateBased': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0DateBased'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].durationEstimated': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0DurationEstimated'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.units[0].timeBased': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationUnits0TimeBased'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].duration.zero': opts['offerExpiryDateIn0OffsetRulesTransitions0DurationZero'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].gap': opts['offerExpiryDateIn0OffsetRulesTransitions0Gap'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].instant': opts['offerExpiryDateIn0OffsetRulesTransitions0Instant'],
        'offerExpiryDate.in[0].offset.rules.transitions[0].overlap': opts['offerExpiryDateIn0OffsetRulesTransitions0Overlap'],
        'offerExpiryDate.in[0].offset.totalSeconds': opts['offerExpiryDateIn0OffsetTotalSeconds'],
        'offerExpiryDate.in[0].second': opts['offerExpiryDateIn0Second'],
        'offerExpiryDate.in[0].year': opts['offerExpiryDateIn0Year'],
        'offerExpiryDate.in[0].zone.id': opts['offerExpiryDateIn0ZoneId'],
        'offerExpiryDate.in[0].zone.rules.fixedOffset': opts['offerExpiryDateIn0ZoneRulesFixedOffset'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].dayOfMonthIndicator': opts['offerExpiryDateIn0ZoneRulesTransitionRules0DayOfMonthIndicator'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].dayOfWeek': opts['offerExpiryDateIn0ZoneRulesTransitionRules0DayOfWeek'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.hour': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeHour'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.minute': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeMinute'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.nano': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeNano'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].localTime.second': opts['offerExpiryDateIn0ZoneRulesTransitionRules0LocalTimeSecond'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].midnightEndOfDay': opts['offerExpiryDateIn0ZoneRulesTransitionRules0MidnightEndOfDay'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].month': opts['offerExpiryDateIn0ZoneRulesTransitionRules0Month'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetAfter.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetAfterId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetAfter.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetAfterTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetBefore.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetBeforeId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].offsetBefore.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0OffsetBeforeTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].standardOffset.id': opts['offerExpiryDateIn0ZoneRulesTransitionRules0StandardOffsetId'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].standardOffset.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitionRules0StandardOffsetTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitionRules[0].timeDefinition': opts['offerExpiryDateIn0ZoneRulesTransitionRules0TimeDefinition'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].dateTimeAfter': opts['offerExpiryDateIn0ZoneRulesTransitions0DateTimeAfter'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].dateTimeBefore': opts['offerExpiryDateIn0ZoneRulesTransitions0DateTimeBefore'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.nano': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationNano'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.negative': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationNegative'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.seconds': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].dateBased': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0DateBased'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].durationEstimated': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0DurationEstimated'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.units[0].timeBased': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationUnits0TimeBased'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].duration.zero': opts['offerExpiryDateIn0ZoneRulesTransitions0DurationZero'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].gap': opts['offerExpiryDateIn0ZoneRulesTransitions0Gap'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].instant': opts['offerExpiryDateIn0ZoneRulesTransitions0Instant'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetAfter.id': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetAfterId'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetAfter.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetAfterTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetBefore.id': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetBeforeId'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].offsetBefore.totalSeconds': opts['offerExpiryDateIn0ZoneRulesTransitions0OffsetBeforeTotalSeconds'],
        'offerExpiryDate.in[0].zone.rules.transitions[0].overlap': opts['offerExpiryDateIn0ZoneRulesTransitions0Overlap'],
        'offerExpiryDate.lessThan': opts['offerExpiryDateLessThan'],
        'offerExpiryDate.lessThanOrEqual': opts['offerExpiryDateLessThanOrEqual'],
        'offerExpiryDate.notEquals': opts['offerExpiryDateNotEquals'],
        'offerExpiryDate.specified': opts['offerExpiryDateSpecified'],
        'page': opts['page'],
        'procurementId.equals': opts['procurementIdEquals'],
        'procurementId.greaterThan': opts['procurementIdGreaterThan'],
        'procurementId.greaterThanOrEqual': opts['procurementIdGreaterThanOrEqual'],
        'procurementId.in': this.apiClient.buildCollectionParam(opts['procurementIdIn'], 'multi'),
        'procurementId.lessThan': opts['procurementIdLessThan'],
        'procurementId.lessThanOrEqual': opts['procurementIdLessThanOrEqual'],
        'procurementId.notEquals': opts['procurementIdNotEquals'],
        'procurementId.specified': opts['procurementIdSpecified'],
        'securityAmount.equals': opts['securityAmountEquals'],
        'securityAmount.greaterThan': opts['securityAmountGreaterThan'],
        'securityAmount.greaterThanOrEqual': opts['securityAmountGreaterThanOrEqual'],
        'securityAmount.in': this.apiClient.buildCollectionParam(opts['securityAmountIn'], 'multi'),
        'securityAmount.lessThan': opts['securityAmountLessThan'],
        'securityAmount.lessThanOrEqual': opts['securityAmountLessThanOrEqual'],
        'securityAmount.notEquals': opts['securityAmountNotEquals'],
        'securityAmount.specified': opts['securityAmountSpecified'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProcurementLotDTO];

      return this.apiClient.callApi(
        '/api/procurement-lots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProcurementLotUsingGET operation.
     * @callback module:api/ProcurementLotResourceApi~getProcurementLotUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementLotDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getProcurementLot
     * @param {module:api/ProcurementLotResourceApi~getProcurementLotUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementLotDTO}
     */
    getProcurementLotUsingGET(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProcurementLotDTO;

      return this.apiClient.callApi(
        '/api/procurement-lots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProcurementLotUsingPUT operation.
     * @callback module:api/ProcurementLotResourceApi~updateProcurementLotUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementLotDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateProcurementLot
     * @param {module:api/ProcurementLotResourceApi~updateProcurementLotUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementLotDTO}
     */
    updateProcurementLotUsingPUT(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProcurementLotDTO;

      return this.apiClient.callApi(
        '/api/procurement-lots', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
