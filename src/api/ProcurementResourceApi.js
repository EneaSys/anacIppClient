/**
 * ItalianPP API
 * ItalianPP API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ProcurementDTO from '../model/ProcurementDTO';

/**
* ProcurementResource service.
* @module api/ProcurementResourceApi
* @version 0.0.1
*/
export default class ProcurementResourceApi {

    /**
    * Constructs a new ProcurementResourceApi. 
    * @alias module:api/ProcurementResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the countProcurementsUsingGET operation.
     * @callback module:api/ProcurementResourceApi~countProcurementsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * countProcurements
     * @param {Object} opts Optional parameters
     * @param {module:api/ProcurementResourceApi~countProcurementsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    countProcurementsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'code.contains': opts['codeContains'],
        'code.doesNotContain': opts['codeDoesNotContain'],
        'code.equals': opts['codeEquals'],
        'code.in': this.apiClient.buildCollectionParam(opts['codeIn'], 'multi'),
        'code.notEquals': opts['codeNotEquals'],
        'code.specified': opts['codeSpecified'],
        'contractorEopooCode.contains': opts['contractorEopooCodeContains'],
        'contractorEopooCode.doesNotContain': opts['contractorEopooCodeDoesNotContain'],
        'contractorEopooCode.equals': opts['contractorEopooCodeEquals'],
        'contractorEopooCode.in': this.apiClient.buildCollectionParam(opts['contractorEopooCodeIn'], 'multi'),
        'contractorEopooCode.notEquals': opts['contractorEopooCodeNotEquals'],
        'contractorEopooCode.specified': opts['contractorEopooCodeSpecified'],
        'description.contains': opts['descriptionContains'],
        'description.doesNotContain': opts['descriptionDoesNotContain'],
        'description.equals': opts['descriptionEquals'],
        'description.in': this.apiClient.buildCollectionParam(opts['descriptionIn'], 'multi'),
        'description.notEquals': opts['descriptionNotEquals'],
        'description.specified': opts['descriptionSpecified'],
        'id.equals': opts['idEquals'],
        'id.greaterThan': opts['idGreaterThan'],
        'id.greaterThanOrEqual': opts['idGreaterThanOrEqual'],
        'id.in': this.apiClient.buildCollectionParam(opts['idIn'], 'multi'),
        'id.lessThan': opts['idLessThan'],
        'id.lessThanOrEqual': opts['idLessThanOrEqual'],
        'id.notEquals': opts['idNotEquals'],
        'id.specified': opts['idSpecified'],
        'ippModalityCode.contains': opts['ippModalityCodeContains'],
        'ippModalityCode.doesNotContain': opts['ippModalityCodeDoesNotContain'],
        'ippModalityCode.equals': opts['ippModalityCodeEquals'],
        'ippModalityCode.in': this.apiClient.buildCollectionParam(opts['ippModalityCodeIn'], 'multi'),
        'ippModalityCode.notEquals': opts['ippModalityCodeNotEquals'],
        'ippModalityCode.specified': opts['ippModalityCodeSpecified'],
        'ippProcedureCode.contains': opts['ippProcedureCodeContains'],
        'ippProcedureCode.doesNotContain': opts['ippProcedureCodeDoesNotContain'],
        'ippProcedureCode.equals': opts['ippProcedureCodeEquals'],
        'ippProcedureCode.in': this.apiClient.buildCollectionParam(opts['ippProcedureCodeIn'], 'multi'),
        'ippProcedureCode.notEquals': opts['ippProcedureCodeNotEquals'],
        'ippProcedureCode.specified': opts['ippProcedureCodeSpecified'],
        'ippSectorCode.contains': opts['ippSectorCodeContains'],
        'ippSectorCode.doesNotContain': opts['ippSectorCodeDoesNotContain'],
        'ippSectorCode.equals': opts['ippSectorCodeEquals'],
        'ippSectorCode.in': this.apiClient.buildCollectionParam(opts['ippSectorCodeIn'], 'multi'),
        'ippSectorCode.notEquals': opts['ippSectorCodeNotEquals'],
        'ippSectorCode.specified': opts['ippSectorCodeSpecified'],
        'ref.contains': opts['refContains'],
        'ref.doesNotContain': opts['refDoesNotContain'],
        'ref.equals': opts['refEquals'],
        'ref.in': this.apiClient.buildCollectionParam(opts['refIn'], 'multi'),
        'ref.notEquals': opts['refNotEquals'],
        'ref.specified': opts['refSpecified'],
        'totalAmount.equals': opts['totalAmountEquals'],
        'totalAmount.greaterThan': opts['totalAmountGreaterThan'],
        'totalAmount.greaterThanOrEqual': opts['totalAmountGreaterThanOrEqual'],
        'totalAmount.in': this.apiClient.buildCollectionParam(opts['totalAmountIn'], 'multi'),
        'totalAmount.lessThan': opts['totalAmountLessThan'],
        'totalAmount.lessThanOrEqual': opts['totalAmountLessThanOrEqual'],
        'totalAmount.notEquals': opts['totalAmountNotEquals'],
        'totalAmount.specified': opts['totalAmountSpecified']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/api/procurements/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createProcurementUsingPOST operation.
     * @callback module:api/ProcurementResourceApi~createProcurementUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createProcurement
     * @param {module:api/ProcurementResourceApi~createProcurementUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementDTO}
     */
    createProcurementUsingPOST(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProcurementDTO;

      return this.apiClient.callApi(
        '/api/procurements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProcurementUsingDELETE operation.
     * @callback module:api/ProcurementResourceApi~deleteProcurementUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteProcurement
     * @param {module:api/ProcurementResourceApi~deleteProcurementUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProcurementUsingDELETE(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/procurements/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllProcurementsUsingGET operation.
     * @callback module:api/ProcurementResourceApi~getAllProcurementsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProcurementDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllProcurements
     * @param {Object} opts Optional parameters
     * @param {module:api/ProcurementResourceApi~getAllProcurementsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProcurementDTO>}
     */
    getAllProcurementsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'code.contains': opts['codeContains'],
        'code.doesNotContain': opts['codeDoesNotContain'],
        'code.equals': opts['codeEquals'],
        'code.in': this.apiClient.buildCollectionParam(opts['codeIn'], 'multi'),
        'code.notEquals': opts['codeNotEquals'],
        'code.specified': opts['codeSpecified'],
        'contractorEopooCode.contains': opts['contractorEopooCodeContains'],
        'contractorEopooCode.doesNotContain': opts['contractorEopooCodeDoesNotContain'],
        'contractorEopooCode.equals': opts['contractorEopooCodeEquals'],
        'contractorEopooCode.in': this.apiClient.buildCollectionParam(opts['contractorEopooCodeIn'], 'multi'),
        'contractorEopooCode.notEquals': opts['contractorEopooCodeNotEquals'],
        'contractorEopooCode.specified': opts['contractorEopooCodeSpecified'],
        'description.contains': opts['descriptionContains'],
        'description.doesNotContain': opts['descriptionDoesNotContain'],
        'description.equals': opts['descriptionEquals'],
        'description.in': this.apiClient.buildCollectionParam(opts['descriptionIn'], 'multi'),
        'description.notEquals': opts['descriptionNotEquals'],
        'description.specified': opts['descriptionSpecified'],
        'id.equals': opts['idEquals'],
        'id.greaterThan': opts['idGreaterThan'],
        'id.greaterThanOrEqual': opts['idGreaterThanOrEqual'],
        'id.in': this.apiClient.buildCollectionParam(opts['idIn'], 'multi'),
        'id.lessThan': opts['idLessThan'],
        'id.lessThanOrEqual': opts['idLessThanOrEqual'],
        'id.notEquals': opts['idNotEquals'],
        'id.specified': opts['idSpecified'],
        'ippModalityCode.contains': opts['ippModalityCodeContains'],
        'ippModalityCode.doesNotContain': opts['ippModalityCodeDoesNotContain'],
        'ippModalityCode.equals': opts['ippModalityCodeEquals'],
        'ippModalityCode.in': this.apiClient.buildCollectionParam(opts['ippModalityCodeIn'], 'multi'),
        'ippModalityCode.notEquals': opts['ippModalityCodeNotEquals'],
        'ippModalityCode.specified': opts['ippModalityCodeSpecified'],
        'ippProcedureCode.contains': opts['ippProcedureCodeContains'],
        'ippProcedureCode.doesNotContain': opts['ippProcedureCodeDoesNotContain'],
        'ippProcedureCode.equals': opts['ippProcedureCodeEquals'],
        'ippProcedureCode.in': this.apiClient.buildCollectionParam(opts['ippProcedureCodeIn'], 'multi'),
        'ippProcedureCode.notEquals': opts['ippProcedureCodeNotEquals'],
        'ippProcedureCode.specified': opts['ippProcedureCodeSpecified'],
        'ippSectorCode.contains': opts['ippSectorCodeContains'],
        'ippSectorCode.doesNotContain': opts['ippSectorCodeDoesNotContain'],
        'ippSectorCode.equals': opts['ippSectorCodeEquals'],
        'ippSectorCode.in': this.apiClient.buildCollectionParam(opts['ippSectorCodeIn'], 'multi'),
        'ippSectorCode.notEquals': opts['ippSectorCodeNotEquals'],
        'ippSectorCode.specified': opts['ippSectorCodeSpecified'],
        'page': opts['page'],
        'ref.contains': opts['refContains'],
        'ref.doesNotContain': opts['refDoesNotContain'],
        'ref.equals': opts['refEquals'],
        'ref.in': this.apiClient.buildCollectionParam(opts['refIn'], 'multi'),
        'ref.notEquals': opts['refNotEquals'],
        'ref.specified': opts['refSpecified'],
        'size': opts['size'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'totalAmount.equals': opts['totalAmountEquals'],
        'totalAmount.greaterThan': opts['totalAmountGreaterThan'],
        'totalAmount.greaterThanOrEqual': opts['totalAmountGreaterThanOrEqual'],
        'totalAmount.in': this.apiClient.buildCollectionParam(opts['totalAmountIn'], 'multi'),
        'totalAmount.lessThan': opts['totalAmountLessThan'],
        'totalAmount.lessThanOrEqual': opts['totalAmountLessThanOrEqual'],
        'totalAmount.notEquals': opts['totalAmountNotEquals'],
        'totalAmount.specified': opts['totalAmountSpecified']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProcurementDTO];

      return this.apiClient.callApi(
        '/api/procurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProcurementUsingGET operation.
     * @callback module:api/ProcurementResourceApi~getProcurementUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getProcurement
     * @param {module:api/ProcurementResourceApi~getProcurementUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementDTO}
     */
    getProcurementUsingGET(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProcurementDTO;

      return this.apiClient.callApi(
        '/api/procurements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProcurementUsingPUT operation.
     * @callback module:api/ProcurementResourceApi~updateProcurementUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcurementDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateProcurement
     * @param {module:api/ProcurementResourceApi~updateProcurementUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcurementDTO}
     */
    updateProcurementUsingPUT(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ServiceAccount', 'UserInterface'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProcurementDTO;

      return this.apiClient.callApi(
        '/api/procurements', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
